(ns acme.main
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter/widgets.dart" :as widgets]
            ["package:wakelock_plus/wakelock_plus.dart" :as wl]
            [cljd.flutter :as f]))

(def mana-colors
  [:white :red :blue :black :green :colorless])


(def color-map
  {:white m/Colors.white
   :red m/Colors.red
   :blue m/Colors.blue
   :black m/Colors.black
   :green m/Colors.green
   :poison m/Colors.purple
   :colorless m/Colors.grey})

(def all-counters
  (conj mana-colors :poison :storm))

(def initial-config-state
  (->> all-counters
       (reduce #(assoc %1 %2 true) {})))

(defonce configuration-state
  (atom initial-config-state))

(defn zero! [state k]
  (swap! state assoc k 0))

(defn end-turn! [state]
  (doseq [mana mana-colors] (zero! state mana))
  (zero! state :storm))

(defn configuration []
  (m/Scaffold
   .appBar (m/AppBar .title (m/Text "Configuration"))
   .body
   (m/Column
    .mainAxisAlignment m/MainAxisAlignment.center
    .children
    (for [k all-counters]
      (m/Row
       .mainAxisAlignment m/MainAxisAlignment.center
       .children
       [(m/Text (str k))
        (f/widget
         :watch [{n k} configuration-state]
         :let [_ (dart:core/print k)
               __ (dart:core/print n)]
         (m/Switch
          .value (k @configuration-state false)
          .onChanged (fn [_] (swap! configuration-state assoc k (not (k @configuration-state))))))])))))


(def home
  (f/widget
   (m/Scaffold
    .appBar
    (m/AppBar
     .title (m/Text "Counters")
     .actions
     [(f/widget
       :get [:counters]
       (m/IconButton .icon (m/Icon m/Icons.autorenew))
       .onPressed
       (fn []
         (end-turn! counters)
         nil))
      (f/widget
       (m/IconButton .icon (m/Icon m/Icons.cancel))
       .onPressed
       (fn []
         ()
         nil))
      (f/widget
       :get [m/Navigator]
       (m/IconButton .icon (m/Icon m/Icons.settings))
       .onPressed
       #(do
          (.push navigator (#/(m/MaterialPageRoute Object) .builder (f/build (configuration))))
          nil))]))
   .body
   m/Center
   (f/widget
    :watch [config-state configuration-state]
    (m/Column .mainAxisAlignment m/MainAxisAlignment.center)
    .children
    (for [k all-counters
          :let [enabled? (k config-state)]
          :when (or enabled? (nil? enabled?))]
      (f/widget
       m/Expanded
       :color (k color-map m/Colors.white)
       (m/Row
        .mainAxisAlignment m/MainAxisAlignment.center
        .children
        [(m/Text (str k))
         (f/widget
          :get [:counters]
          :watch [{n k} counters]
          :let [_ (dart:core/print "build -")]
          (m/ElevatedButton
           .onPressed (when (pos? n) #(swap! counters update k dec)))
          (m/Text "-"))
         (f/widget
          :get {:value-of [:counters]}
          :watch [{n k} counters]
          :let [_ (dart:core/print (str "build text " k))]
          (m/Text (str n) .style (m/TextStyle
                                  .color (if (= k :black) m/Colors.white m/Colors.black)
                                  .fontSize 32.0)))
         (f/widget
          :get [:counters]
          :let [_ (dart:core/print "build +")]
          (m/ElevatedButton .onPressed #(swap! counters update k inc))
          (m/Text "+"))]))))))

(def initial-counter-state
  (->> (conj mana-colors :poison :storm)
       (reduce #(assoc %1 %2 0) {})))

(defn main []
  (.ensureInitialized widgets/WidgetsFlutterBinding)
  (.enable wl/WakelockPlus)
  (f/run
   (m/MaterialApp
    .title "MTG lil Dolly"
    .theme (m/ThemeData .primarySwatch m.Colors/pink))
   .home
   :bind {:counters (atom initial-counter-state)}
   home)) 